service: vf-project

# app and org for use with dashboard.serverless.com
#app: vf-project
#org: bencassidy

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "DataBucket" }, "/*" ] ]  }
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchWriteItem"
      Resource: { "Fn::Join" : ["", ["arn:aws:dynamodb:us-east-1:*:table/", { "Ref" : "DataTable" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  processData:
    handler: handler.process
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

resources:
  Resources:
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: vf-sls-data
    DataTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: episodes
          AttributeDefinitions:
            -
              AttributeName: "EpisodeId"
              AttributeType: "S"
            -
              AttributeName: "EpisodeTitle"
              AttributeType: "S"
          KeySchema:
            -
              AttributeName: "EpisodeId"
              KeyType: "HASH"
            -
              AttributeName: "EpisodeTitle"
              KeyType: "RANGE"
          BillingMode: PROVISIONED
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  Outputs:
     NewOutput:
       Description: "Description for the output"
       Value: ""
